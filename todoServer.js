/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, "description": "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs=require('fs');
const bodyParser = require('body-parser');

const app = express();
const port=3000;

//let todoList=[];


app.use(bodyParser.json()); // To parse Requests body
// app.get('/',(req,res)=>{
//   res.send("Server Sucessfully created");
// })

app.get('/todos',(req,res)=>{
  fs.readFile('database.json','utf8',(err,data)=>{
    if(err)
      throw err;
    else
      res.send(JSON.parse(data));
  // const myJSON = JSON.stringify(todoList);
  // res.send(myJSON);
  })
})

app.get('/todos/:id',(req,res)=>{
    let todoId=req.params.id;
    let found=false;
    let todoList;
    fs.readFile('database.json','utf8',(err,data)=>{
      if(err)
        throw err;
      else
      {
        let myJSON=JSON.parse(data);
        todoList=myJSON;
        // console.log(data);
        // console.log(todoList);
        for(let i=0;i<todoList.length;i++)
        {
          if(todoList[i].id==todoId)
          {
            let todo=todoList[i];
            const myJSON = JSON.stringify(todo);
            found=true;
            res.send(myJSON);
          }
        }
        if(!found)
        {
          res.status(404).send('No such todo present');
        }
      }
            
      })
    
    })
app.post('/todos',(req,res)=>{
  //console.log(req.body);
  let todoId=Math.floor(Math.random()*(1000-1)+1);
  let todoTitle=req.body.title;
  let todoDesc=req.body.description;
  let todo={
    title: todoTitle,
    description: todoDesc,
    id: todoId
  }
  let todoList;
  fs.readFile('database.json','utf8',(err,data)=>{
    if(err)
      throw err;
    else
    {
      todoList=JSON.parse(data);
      todoList.push(todo); 
      // console.log(todoList);
      let obj={
        title: todoTitle,
        description: todoDesc,
        id: todoId
      }
        //const myJSON= JSON.stringify(objId);
      let data1=JSON.stringify(todoList);
      fs.writeFile('database.json',data1,(err)=>{
        if(err)
          throw err;
      })
      res.status(201).send(obj);
    }
    })  
  })
  

app.put('/todos/:id',(req,res)=>{
  let todoTitle=req.body.title;
  let todoDesc=req.body.description;
  let todoId=req.params.id;
  // console.log(todoTitle);
  // console.log(todoId);
  // console.log(todoList);
  let todoList;
  fs.readFile('database.json','utf8',(err,data)=>{
    if(err)
      throw err;
    else
    {
      todoList=JSON.parse(data);
      let found=false;
      console.log(todoList.length);
      for(let i=0;i<todoList.length;i++)
      {
        if(todoList[i].id==todoId)
        {
          found=true;
          // todoList[i].completed=req.body.completed;
          todoList[i].title=todoTitle;
          todoList[i].description=todoDesc;
          // res.send("todo successfully updated");
          // console.log(todoList[i]);
          let data=JSON.stringify(todoList);
          fs.writeFile('database.json',data,(err)=>{
            if(err)
              throw err;
          })
          res.status(200).send("200 OK");
          break;
        }
      }
      if(!found)
      {
        res.status(404).send("Not Found");
      }
    }
  })
})
app.delete('/todos/:id',(req,res)=>{
  let todoList;
  fs.readFile('database.json','utf8',(err,data)=>{
    if(err)
      throw err;
    else
    {
      todoList=JSON.parse(data);
      let todoId=req.params.id;
      let found=false;
      for(let i=0;i<todoList.length;i++)
      {
        if(todoList[i].id==todoId)
        {
          todoList.splice(i,1);
          // console.log(todoList);
          let data=JSON.stringify(todoList);
          fs.writeFile('database.json',data,(err)=>{
            if(err)
              throw err;
          })
          res.send("todo sucessfully deleted");
          found=true;
          break;
        }
      }
      if(!found)
      {
        res.status(404).send("Not Found");
      }
    }  
  })
})
app.get('/',(req,res)=>{
  res.sendFile("/Users/sathvik_kandadi/Desktop/100xdev's/02-js/02-nodejs/index.html");
})
app.use((req, res, next) => {
  res.status(404).send("Route not found");
})

app.listen(port,()=>{
  console.log(`App listening on port ${port}`);
})

module.exports = app;
